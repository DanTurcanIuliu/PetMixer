@page "/Feedback/{id:int}"
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IAnnouncementService AnnouncementService

<div class="content">
    @if (Email == null)
    {
        <label>@message</label>
    }
    else
    {
        <div class="container">
        <div class="col-md-7 col-lg-8">
            <br/>
            <h4 class="mb-3">End Service</h4>
          <form class="needs-validation" novalidate="">
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="zip" class="form-label">Rating</label>
                    <br/>
                    <RadzenNumeric @bind-Value="Rating" Style="width: var(--inputs-width)" Name="PetWeight"/>
                </div>
                
                <div class="col-12">
                    <label for="phone" class="form-label"></label>
                    <input type="text" class="form-control" @bind="UserFeedback">
                </div>
                  
              
            </div>
                  
            <hr class="my-4">
                  
            <div class="form-check">
              <input type="checkbox" class="form-check-input" id="same-address">
              <label class="form-check-label" for="same-address">Close Service Without feedback</label>
            </div>
                  
            <hr class="my-4">
          </form>
          <button class="w-20 btn btn-primary btn-lg" @onclick="SubmitFeedback" >Send Feedback</button>
        </div>
        
        <br/>
        
      </div>
        /*
        <div class="d-flex flex-row justify-content-center">
                <div class="card">
                    <RadzenTextBox @bind="feedbackGood" class="w-100" />
                    <RadzenTextBox @bind="feedbackBad" class="w-100" />
                    <Stars RatingChanged="OnRating"/>
                    <p>You rated it: @myRating</p>
                    <button class="icon-button" @onclick="SubmitFeedback">
                    </button>
                </div>
        </div>*/
    }
</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    public string Email;
    
    private Announcement? announcement;
    [Parameter] public int Id { get; init; }
    private string message = "Loading...";
    
    private int Rating;
    private string UserFeedback;
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        Email = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("Email"))!.Value;
    }
    
    private async Task SubmitFeedback()
    {
        Console.WriteLine($"Rating {Rating} Feedback: {UserFeedback}");
    }

}