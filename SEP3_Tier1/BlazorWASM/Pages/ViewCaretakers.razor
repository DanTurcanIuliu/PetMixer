@page "/ViewCaretakers"
@using Domain.Models
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@using Newtonsoft.Json
@using Variant = Radzen.Variant
@inject IAuthService AuthService
@inject IUserService UserService

<div class="d-flex flex-row">
    <div class="dropdown">
        <RadzenButton Style="min-width: 160px;" Click="@(_ => isFilterShown = !isFilterShown)">Select filters</RadzenButton>
        @if (isFilterShown)
        {
            <div class="dropdown-content">
                <RadzenLabel Text="Age" Style="margin-left: 8px; vertical-align: middle;"/>
                <RadzenNumeric Style="margin-bottom: 5px"
                    @bind-Value=@age/>
                <RadzenButton Style="margin-top: 10px; white-space: nowrap; background-color: var(--accent-color);"
                              Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => FilterCaretakers()) Text="Apply Filters" ButtonStyle="ButtonStyle.Primary"/>
            </div>
        }
    </div>
</div>

<div class="d-flex flex-row">
    <div class="content">
        @if (caretakers == null)
        {
            <label>Loading...</label>
        }
        else
        {
            @foreach (var caretaker in caretakers!)
            {
                <CaretakerComponent Caretaker="caretaker"/>
            }
        }
    </div>
</div>


@code {

    private List<User>? caretakers;
    private bool isFilterShown;

    private DateTime? startDate;
    private DateTime? endDate;
    private int age;
    private string userName;
}

@functions
{
    protected override async Task OnInitializedAsync()
    {
        SearchUsersDto dto = new SearchUsersDto
        {
            Type = "CareTaker"
        };

        try
        {
            caretakers = (await UserService.GetUsers(dto)).ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
        
    }
   

    private async void FilterCaretakers()
    {

        SearchUsersDto dto = new SearchUsersDto()
        {
            Type = "CareTaker",
            Age = age,
            Name = userName
        };
        
        try
        {
            caretakers = (await UserService.GetUsers(dto)).ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
    }
}