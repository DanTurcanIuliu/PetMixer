@page "/ManageServices"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using System.Security.Claims
@using Domain.DTOs
@using Domain.Models.Enums
@inject IAnnouncementService AnnouncementService
@inject NavigationManager navMgr
@attribute [Authorize]



@if (username == null)
{
    <label>Loading...</label>
}
else
{
    <AuthorizeView>
        <div class="MyProfile-header">
            <div class="card" @onclick='() => navMgr.NavigateTo($"/MyProfile")'>
                <RadzenImage Path="https://cdn2.iconfinder.com/data/icons/veterinary-12/512/Veterinary_Icons-16-512.png" Style="width: 100px; height: 100px; border-radius: 50%;"/>
                <div class="column" Gap="0">
                    <h3>Salutations, @username !</h3>
                </div>
            </div>
            <div class="card" @onclick='() => navMgr.NavigateTo($"/ManageProfile")' >
                <RadzenImage Path="https://cdn-icons-png.flaticon.com/512/166/166256.png" Style="width: 100px; height: 100px; border-radius: 50%;"/>
                <div class="column" Gap="0">
                    <h3>Edit Profile</h3>
                </div>
            </div>
            <div class="card selected" >
                <RadzenImage Path="https://cdn-icons-png.flaticon.com/512/166/166256.png" Style="width: 100px; height: 100px; border-radius: 50%;"/>
                <div class="column" Gap="0">
                    <h3>Manage Services</h3>
                </div>
            </div>
        </div>
    </AuthorizeView>
    <div class="d-flex flex-row">
        <div class="sidebar filter-area">
        </div>
        <div class="content">
            @if (services == null)
            {
                <label>Loading...</label>
            }
            else
            {
                @foreach (var service in services!)
                {
                    <ServiceComponent Service="service" OnClickCallback="() => ChangeStatus(service)"/>
                }
            }
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private List<Service>? services;
    public string? username;
    public string Email;
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        username = authState.User.Claims.First(claim => claim.Type.Equals(ClaimTypes.Name)).Value;
        Email = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("Email"))!.Value;
        try
        {
            services = (await AnnouncementService.GetServicesAsync(
                new SearchServicesDto()
                {
                    petOwnerEmail = Email
                })
                ).ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine("You don't have any services");
        }

        services = GenerateDumyData();
    }

    private async Task ChangeStatus(Service service)
    {
        Console.WriteLine("Button Was pressed for End Service");
        navMgr.NavigateTo($"/Feedback/{service.Id}");
    }

    private List<Service> GenerateDumyData()
    {
        List<Service> demo = new List<Service>();

        PetOwner petOwner = new PetOwner()
        {
            Email = "demoPetOwner@gmail.com",
            Username = "Vasea Demo",
            Password = "1111",
            Type = "PetOwner",
        };

        CareTaker careTaker = new CareTaker
        {
            Email = "demoCareTaker@gmail.com",
            Username = "Vasea Demo",
            Password = "1111",
            Type = "PetOwner"
        };

        Announcement announcement = new Announcement
        {
            CreationDateTime = DateTime.Today,
            StartDate = DateTime.Today,
            EndDate = DateTime.Today,
            Id = 1,
            PetOwner = petOwner,
            PostalCode = "8700",
            Pet = new Pet
            {
                PetOwner = petOwner,
                PetType = PetType.Type.Cat,
                PetName = "Murca",
                IsVaccinated = true,
                Description = "Some description",
                Weight = 5,
            }
        };
        
        demo.Add(new Service()
        {
            PetOwner = petOwner,
            CareTaker = careTaker,
            Announcement = announcement,
            Status = ServiceEnum.PLANNED,
        });
        return demo;
    }
}