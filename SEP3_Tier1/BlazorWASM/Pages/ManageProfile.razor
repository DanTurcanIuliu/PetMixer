@page "/ManageProfile"
@using System.Security.Claims
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@using Newtonsoft.Json
@inject NavigationManager navMgr
@inject IAuthService authService
@inject IUserService userService
@attribute [Authorize]

@if (Email == null)
{
    <label>Loading...</label>
}
else
{
    <AuthorizeView>
      <div class="MyProfile-header">
        <div class="card" @onclick='() => navMgr.NavigateTo($"/MyProfile")'>
          <RadzenImage Path="https://cdn2.iconfinder.com/data/icons/veterinary-12/512/Veterinary_Icons-16-512.png" Style="width: 100px; height: 100px; border-radius: 50%;"/>
          <div class="column" Gap="0">
            <h3>Salutations, @Username !</h3>
          </div>
        </div>
        <div class="card selected">
          <RadzenImage Path="https://cdn-icons-png.flaticon.com/512/166/166256.png" Style="width: 100px; height: 100px; border-radius: 50%;"/>
          <div class="column" Gap="0">
            <h3>Edit Profile</h3>
          </div>
        </div>
        <div class="card" @onclick='() => navMgr.NavigateTo($"/ManageServices")' >
          <RadzenImage Path="https://cdn-icons-png.flaticon.com/512/166/166256.png" Style="width: 100px; height: 100px; border-radius: 50%;"/>
          <div class="column" Gap="0">
            <h3>Manage Services</h3>
          </div>
        </div>
      </div>
      
      <div class="container">
        <div class="col-md-7 col-lg-8">
          <br/>
          <form class="needs-validation" novalidate="">
            <div class="row g-3">
                
              <div class="col-12">
                <label for="Username" class="form-label">Username</label>
                <input type="text" class="form-control" @bind="Username">
              </div>
                  
              <div class="col-12">
                <label for="email" class="form-label">Email <span class="text-body-secondary">(Can't Be Changed)</span></label>
                <input readonly type="email" class="form-control" id="email" placeholder="@Email">
              </div>
              
              <div class="col-12">
                <label for="phone" class="form-label">Password</label>
                <input type="text" class="form-control" @bind="Password">
              </div>
                  
              <div class="col-12">
                <label for="phone" class="form-label">Phone Number</label>
                <input type="text" class="form-control" id="phone" @bind="PhoneNumber">
              </div>
                  
              <div class="col-md-3">
                <label for="zip" class="form-label">Age</label>
                <br/>
                <RadzenNumeric @bind-Value="Age" Style="width: var(--inputs-width)" Name="PetWeight"/>
              </div>
            </div>
                  
            <hr class="my-4">
                  
            <div class="form-check">
              <input type="checkbox" class="form-check-input" id="same-address">
              <label class="form-check-label" for="same-address">Notify me about new announcements</label>
            </div>
                  
            <div class="form-check">
              <input type="checkbox" class="form-check-input" id="save-info">
              <label class="form-check-label" for="save-info">Notify when somebody are requesting a service</label>
            </div>
                  
            <hr class="my-4">
          </form>
          <button class="w-20 btn btn-primary btn-lg" @onclick="EditProfile">Save Changes</button>
          <button class="w-20 btn btn-outline-danger btn-lg" @onclick="DeleteProfile" >Delete Profile</button>
        </div>
        
        <br/>
        
      </div>
    </AuthorizeView>
}


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
  
    private string Email;
    private string Username;
    private string Name;
    private string? PhoneNumber;
  private int? Age;
  private string Password;
    
    protected override async Task OnInitializedAsync()
    {
      AuthenticationState authState = await AuthState;
      ClaimsPrincipal user = authState.User;
      FetchDataFromClaims(user);
    }


  private async Task EditProfile()
  {
    try
    {
      UserEditDto dto = new UserEditDto(Email);
      AddInfoInDtoOObject(dto);
      
      //For Debugging
      Console.WriteLine(JsonConvert.SerializeObject(dto));
      await userService.EditProfile(dto);
      SuccessMessage("Profile was updated");
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      ErrorMessage(e);
    }
  }
  
  private async Task DeleteProfile()
  {
    try
    {
      await userService.DeleteProfile(Email);
      SuccessMessage("Profile was deleted");
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      ErrorMessage(e);
    }
  }

  private void SuccessMessage(String message)
  {
    NotificationService.Notify(new NotificationMessage()
    {
      Severity = NotificationSeverity.Success,
      Duration = 6000,
      Detail = message
    });
  }

  private void ErrorMessage(Exception e)
  {
    NotificationService.Notify(new NotificationMessage()
    {
      Severity = NotificationSeverity.Error,
      Duration = 6000,
      Detail = e.Message
    });
  }

  private void FetchDataFromClaims(ClaimsPrincipal user)
  {
    Username = user.Claims.First(claim => claim.Type.Equals(ClaimTypes.NameIdentifier)).Value;
    Email = user.Claims.FirstOrDefault(c => c.Type.Equals("Email"))!.Value;
    Password = user.Claims.FirstOrDefault(c => c.Type.Equals("Password"))!.Value;
    PhoneNumber = user.Claims.FirstOrDefault(c => c.Type.Equals("PhoneNumber"))!.Value;
    string? numString = user.Claims.FirstOrDefault(c => c.Type.Equals("Age"))?.Value;
    if (string.IsNullOrEmpty(numString))
    {
      Age = null;
    }
    else
    {
      Age = int.Parse(numString);
    }
  }

  private void AddInfoInDtoOObject(UserEditDto dto)
  {
    dto.UserName = Username;
    dto.Password = Password;
    dto.Age = Age;
    dto.PhoneNumber = PhoneNumber;
  }
}