@inject IAnnouncementService announcementService
@inject IUserAuthService UserAuthService

@page "/CreateAnnouncement"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims
@inject NotificationService notificationService
@attribute [Authorize]

<div class="content d-flex justify-content-center">
    <div class="card">
        <h5>Fill the small form to create your announcement.</h5>
        <div class="field">
            <label>Start date: </label>
            <RadzenDatePicker Style="width: 60%" class="input" TValue="DateTime" 
                              Value="@startDate" DateFormat="dd/MM/yyyy" Change="@(args => startDate = args)"/>
        </div>
        <div class="field">
            <label>End date: </label>
            <RadzenDatePicker Style="width: 60%" bind class="input" TValue="DateTime" 
                              Value="@endDate" DateFormat="dd/MM/yyyy" Change="@(args => endDate = args)"/>
        </div>
        <div class="field">
            <label>Postal code: </label>
            <input type="number" @bind="postalcode"/>
        </div>
        <div class="field">
            <label>Description: </label><br/>
            <textarea @bind="description"></textarea>
        </div>
        
        <RadzenButton Style="margin-top: 2rem" Click="TryCreateAnnouncement">Create announcement</RadzenButton>
    </div>
</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private DateTime? startDate;
    private DateTime? endDate;
    private string ownerEmail;
    private string? description;
    private string? postalcode;
    
    private IEnumerable<Claim>? userClaims;

    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        userClaims = user.Claims;
        ownerEmail = user.Claims.FirstOrDefault(c => c.Type.Equals("Email"))!.Value;
        
        startDate = DateTime.Today;
        endDate = DateTime.Today.AddDays(3);
    }


    private async Task TryCreateAnnouncement()
    {
        try
        {
            HandleEmptyFields();
            
            AnnouncementCreationDto creationDto = new AnnouncementCreationDto(
                ownerEmail, startDate!.Value, endDate!.Value, description!, postalcode!);
            await announcementService.CreateAsync(creationDto);
            
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Duration = 6000,
                Detail = "Announcement is created"
            });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
        
    }
    
    private void HandleEmptyFields()
    {
        string msg = "";
        int emptyFieldsCounter = 0;

        if (startDate == null)
        {
            msg += string.IsNullOrEmpty(msg) ? "Start date is not chosen" : ", start date is not chosen";
        }
        
        if (endDate == null)
        {
            msg += string.IsNullOrEmpty(msg) ? "End date is not chosen" : ", end date is not chosen";
        }

        if (string.IsNullOrEmpty(description))
        {
            msg += string.IsNullOrEmpty(msg) ? "Description" : ", description";
            emptyFieldsCounter++;
        }

        if (string.IsNullOrEmpty(postalcode))
        {
            msg += string.IsNullOrEmpty(msg) ? "Postal code" : ", postal code";
            emptyFieldsCounter++;
        }

        if (!string.IsNullOrEmpty(msg))
            throw new Exception(emptyFieldsCounter > 1 ? $"{msg} fields are empty." : $"{msg} field is empty.");
    }
}