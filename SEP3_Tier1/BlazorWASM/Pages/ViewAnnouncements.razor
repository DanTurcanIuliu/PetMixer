@page "/ViewAnnouncements"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Models
@using Blazored.LocalStorage
@using Newtonsoft.Json
@using System.Security.Claims
@using Domain.Models.Enums
@using Variant = Radzen.Variant
@inject IAnnouncementService AnnouncementService
@inject ICareServiceService CareService
@inject ILocalStorageService LocalStorageService
@inject IPexelsService ImageService
@attribute [Authorize]

<div class="d-flex flex-row">
    <div class="search-container w-100">
        <RadzenTextBox Placeholder="Search..." id="searchInput" class="w-100"/>
        <span class="oi oi-magnifying-glass" id="searchIcon" @onclick="Search"></span>
    </div>
    
    
    <div class="dropdown">
        <RadzenButton Style="margin-left: 8px; min-width: 160px;" Click="@(_ => ShowDropDownContent())">Select filters</RadzenButton>
        <div class="@classDropDown">
            <RadzenDropDown
                @bind-Value=filteredPetTypes
                Data="PetType.PetTypesWithNames"
                Multiple=true
                Placeholder="Select pet types"
                TextProperty="Name"
                Chips="true"
                ValueProperty="Value"
                SelectAllText="Select all types"
                Style="width: 100%; max-width: 400px; margin-bottom: 8px" />
        
            <RadzenCheckBox @bind-Value=@isVaccinatedFilter/>
            <RadzenLabel Text="Vaccinated" Style="margin-left: 8px; vertical-align: middle;" />
            <br />
            <RadzenLabel Text="From Date" Style="margin-left: 8px; vertical-align: middle;" />
            <RadzenDatePicker @bind-Value=@startDate />
            <RadzenLabel Text="To Date" Style="margin-left: 8px; vertical-align: middle;" />
            <RadzenDatePicker @bind-Value=@endDate />
            <RadzenLabel Text="Postal Code" Style="margin-left: 8px; vertical-align: middle;" />
            <RadzenAutoComplete @bind-Value=@postalCode TextProperty="Postal Code" Style="width: 15rem" />
            <RadzenButton Variant="Variant.Flat" Shade="Shade.Dark" Click=@(args => FilterAnnouncements()) Text="Apply Filters" ButtonStyle="ButtonStyle.Primary" />
        </div>
        
    </div>
    
</div>

<div class="d-flex flex-row">
    <div class="sidebar filter-area">
    </div>
    <div class="content">
        @if (announcements == null)
        {
            <label>@message</label>
        }
        else
        {
            @foreach (var announcement in announcements!)
            {
                <AnnouncementComponent
                    Announcement="announcement" 
                    ShowOfferButton='Actor.Equals("CareTaker")'
                    ShowRequestsButton='@false'
                    OnClickCallback="() => OfferServiceRequest(announcement)"/>
            }
        }
    </div>
</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string OwnerEmail;
    private string message = "Loading...";
    private string Actor;
    
    private List<Announcement>? announcements;
    private List<PetType.Type> filteredPetTypes = new();
    private string classDropDown = "dropdown-content";
    private bool isVaccinatedFilter;
    private bool isFilterShown;
    
    private DateTime? startDate;
    private DateTime? endDate;
    private string postalCode;
    private string userName;

    private bool IsFilterShown
    {
        get => isFilterShown;
        set
        {
            isFilterShown = value;
            classDropDown = "dropdown-content";
            if (isFilterShown)
                classDropDown += " show";
            Console.WriteLine(classDropDown);
        }
    }
}

@functions
{
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        OwnerEmail = user.Claims.FirstOrDefault(c => c.Type.Equals("Email"))!.Value;
        Actor = user.Claims.First(claim => claim.Type.Equals(ClaimTypes.Actor)).Value;
        
        SearchAnnouncementDto dto = new SearchAnnouncementDto();

        try
        {
            announcements = (await AnnouncementService.GetAsync(dto)).ToList();
        }
        catch (Exception e)
        {
            message = e.Message;
        }
    }
    
    public void Search()
    {
        Console.WriteLine("pressed");   
        Console.WriteLine(filteredPetTypes.Count);   
    }

    public void ShowDropDownContent()
    {
        IsFilterShown = !IsFilterShown;
    }
    
    public void OnDropDownChange()
    {
        Console.WriteLine(filteredPetTypes);   
        Console.WriteLine("petType");   
    }
    
    private async void FilterAnnouncements()
    {
        
        SearchAnnouncementDto dto = new SearchAnnouncementDto
        {
            PetTypes = filteredPetTypes,
            StartTime = startDate,
            EndTime = endDate,
            PostalCode = postalCode,
        };

        Console.WriteLine($"$Dto object converted to JSON:\n{JsonConvert.SerializeObject(dto)}");
        
        announcements = (await AnnouncementService.GetAsync(dto)).ToList();
        //Console.WriteLine(JsonConvert.SerializeObject(announcements));
    }

    private async Task OfferServiceRequest(Announcement announcement)
    {
        
        CreateOfferCareDto dto = new CreateOfferCareDto
        {
            InitiatorId = OwnerEmail,
            AnnouncementId = announcement.Id,
            RequestEnum = (int)RequestEnum.SENT,
            CreationDateTime = DateTime.Now,
            RecipientId = announcement.PetOwner.Email,
        };
        
        try
        {
            await CareService.OfferServiceAsync(dto);
            SuccessMessage("Request was saved");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ErrorMessage(e);
        }
        
    Console.WriteLine($"Announcement name: {JsonConvert.SerializeObject(announcement)}");
    }
    
    private void SuccessMessage(String message)
    {
        NotificationService.Notify(new NotificationMessage()
        {
            Severity = NotificationSeverity.Success,
            Duration = 6000,
            Detail = message
        });
    }

    private void ErrorMessage(Exception e)
    {
        NotificationService.Notify(new NotificationMessage()
        {
            Severity = NotificationSeverity.Error,
            Duration = 6000,
            Detail = e.Message
        });
    }
}