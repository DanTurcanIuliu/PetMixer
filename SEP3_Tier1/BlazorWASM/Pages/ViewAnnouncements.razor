@page "/ViewAnnouncements"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Models
@inject IAnnouncementService AnnouncementService

<div>
    <RadzenTextBox Placeholder="Search..." Icon="oi oi-magnifying-glass">
        <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
    </RadzenTextBox>
    <RadzenDropDown
        @bind-Value=filteredPetTypes
        Data="PetType.PetTypesWithNames"
        Multiple=true
        Placeholder="Select pet types"
        TextProperty="Name"
        Chips="true"
        ValueProperty="Value"
        SelectAllText="Select all types"
        Style="width: 100%; max-width: 400px;" />
    <RadzenTextBox Placeholder="Search...">
        <Template>
            <div class="input-group">
                <input class="form-control" />
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" @onclick="Search">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
            </div>
        </Template>
    </RadzenTextBox>
</div>


<div class="d-flex flex-row">
    <div class="sidebar filter-area">
    </div>
    <div class="content">
        @if (announcements == null)
        {
            <label>Loading...</label>
        }
        else
        {
            @foreach (var announcement in announcements!)
            {
                <AnnouncementComponent Announcement="announcement"/>
            }
        }
    </div>
</div>


@code {
    private List<Announcement>? announcements;

    protected override async Task OnInitializedAsync()
    {
        announcements = (await AnnouncementService.GetAsync(new SearchAnnouncementDto())).ToList();
    }

    // DROPDOWN
    private List<PetType.Type> filteredPetTypes = new();

    public void Search()
    {
        
    }
}