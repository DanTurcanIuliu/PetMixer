@page "/MyProfile"
@using System.Security.Claims
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IAnnouncementService AnnouncementService
@inject NavigationManager navMgr
@attribute [Authorize]

@if (username == null)
{
    <label>Loading...</label>
}
else
{
    <AuthorizeView>
        <div class="MyProfile-header">
            <div class="card selected">
                <RadzenImage Path="https://cdn2.iconfinder.com/data/icons/veterinary-12/512/Veterinary_Icons-16-512.png" Style="width: 100px; height: 100px; border-radius: 50%;"/>
                <div class="column" Gap="0">
                    <h3>Salutations, @username !</h3>
                </div>
            </div>
            <div class="card" @onclick='() => NavigateTo("ManageProfile")' >
                <RadzenImage Path="https://cdn-icons-png.flaticon.com/512/166/166256.png" Style="width: 100px; height: 100px; border-radius: 50%;"/>
                <div class="column" Gap="0">
                    <h3>Edit Profile</h3>
                </div>
            </div>
        </div>
    </AuthorizeView>
    <div class="d-flex flex-row">
        <div class="sidebar filter-area">
        </div>
        <div class="content">
            @if (announcements == null)
            {
                <label>Loading...</label>
            }
            else
            {
                @foreach (var announcement in announcements!)
                {
                    <div class="d-flex flex-row justify-content-center">
                        <div class="card small-card">
                            <button class="icon-button" @onclick="() => OpenEditAnnouncement(announcement.Id)">
                                <span class="oi oi-pencil"></span>
                            </button>
                            <button class="icon-button">
                                <span class="oi oi-trash"></span>
                            </button>
                            <button class="icon-button">
                                <span class="oi oi-share"></span>
                            </button>
                        </div>
                        <AnnouncementComponent Announcement="announcement"/>
                    </div>
                }
            }
        </div>
    </div>
}


@code {
    private List<Announcement>? announcements;
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    public string? username;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        username = authState.User.Claims.First(claim => claim.Type.Equals(ClaimTypes.Name)).Value;
        announcements = (await AnnouncementService.GetAsync(new SearchAnnouncementDto(){Username = username})).ToList();
    }

    private void NavigateTo(String address)
    {
        try
        {
            switch (address)
            {
                case "ManageProfile":
                    navMgr.NavigateTo($"/ManageProfile");
                    break;
                case "MyProfile":
                    navMgr.NavigateTo($"/MyProfile");
                    break;
            }
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
    }
    
    private void OpenEditAnnouncement(int announcementId)
    {
        try
        {
            navMgr.NavigateTo($"/ManageAnnouncement/{announcementId}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        navMgr.NavigateTo($"/ManageAnnouncement/{announcementId}");
    }
}