@page "/MyProfile"
@using System.Security.Claims
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IAnnouncementService AnnouncementService
@inject NavigationManager navMgr
@attribute [Authorize]

@if (email == null)
{
    <label>Loading...</label>
}
else
{
    <AuthorizeView>
        <div class="MyProfile-header">
            <div class="card selected">
                <RadzenImage Path="https://cdn2.iconfinder.com/data/icons/veterinary-12/512/Veterinary_Icons-16-512.png" Style="width: 100px; height: 100px; border-radius: 50%;"/>
                <div class="column">
                    <h3>Salutations, @email !</h3>
                </div>
            </div>
            <div class="card" @onclick='() => navMgr.NavigateTo($"/ManageProfile")' >
                <RadzenImage Path="https://cdn-icons-png.flaticon.com/512/166/166256.png" Style="width: 100px; height: 100px; border-radius: 50%;"/>
                <div class="column">
                    <h3>Edit Profile</h3>
                </div>
            </div>
            <div class="card" @onclick='() => navMgr.NavigateTo($"/ManageServices")' >
                <RadzenImage Path="https://cdn-icons-png.flaticon.com/512/166/166256.png" Style="width: 100px; height: 100px; border-radius: 50%;"/>
                <div class="column" Gap="0">
                    <h3>Manage Services</h3>
                </div>
            </div>
        </div>
    </AuthorizeView>
    <div class="d-flex flex-row">
        <div class="sidebar filter-area">
        </div>
        <div class="content">
            @if (announcements == null)
            {
                <label>@message</label>
            }
            else
            {
                @foreach (var announcement in announcements!)
                {
                    <div class="d-flex flex-row justify-content-center">
                        <div class="card small-card">
                            <button class="icon-button" @onclick="() => OpenEditAnnouncement(announcement.Id)">
                                <span class="oi oi-pencil"></span>
                            </button>
                            <button class="icon-button" @onclick="() => DeleteAnnouncement(announcement.Id)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </div>
                        <AnnouncementComponent Announcement="announcement"/>
                    </div>
                }
            }
        </div>
    </div>
}


@code {
    private List<Announcement>? announcements;
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string? email;
    private string message = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        email = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("Email"))!.Value;

        try
        {
            announcements = (await AnnouncementService.GetAsync(
                new SearchAnnouncementDto
                {
                    UserEmail = email
                })
                ).ToList();
        }
        catch (Exception e)
        {
            message = "You don't have announcements.";
        }
        
    }

    private void NavigateTo(string address)
    {
        try
        {
            switch (address)
            {
                case "ManageProfile":
                    navMgr.NavigateTo($"/ManageProfile");
                    break;
                case "MyProfile":
                    navMgr.NavigateTo($"/MyProfile");
                    break;
            }
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
    }
    
    private void OpenEditAnnouncement(int announcementId)
    {
        try
        {
            navMgr.NavigateTo($"/ManageAnnouncement/{announcementId}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task DeleteAnnouncement(int announcementId)
    {
        try
        {
            Console.WriteLine("Deleting announcement...");
            await AnnouncementService.DeleteAsync(announcementId);
            
            Console.WriteLine();

            // Update the local list by removing the deleted announcement
            announcements?.RemoveAll(a => a.Id == announcementId);

            // Trigger a re-render of the component to reflect the updated data
            StateHasChanged();

            Console.WriteLine("Announcement deleted successfully.");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}