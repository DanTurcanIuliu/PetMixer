@page "/RemoteTest"
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
<h3>RemoteTest</h3>

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@* <ul id="messagesList"> *@
@*     @foreach (var message in messages) *@
@*     { *@
@*         <li>@message</li> *@
@*     } *@
@* </ul> *@

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7230/offers")
            .Build();
        
        hubConnection.On<string, string>("Test", (user, message) =>
        {
            var encodedMsg = $"{user}:{message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });
        
        await hubConnection.StartAsync();
    }
    
    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
        else
        {
            messages.Add("error");
        }
    }
    //
    // public bool IsConnected =>
    //     hubConnection?.State == HubConnectionState.Connected;
    //
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}