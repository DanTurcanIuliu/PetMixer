@using BlazorWASM.Validators
@using Domain.Models
@using ButtonType = Radzen.ButtonType

<style>
    article{
    background-size: cover;
    opacity: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0;
}
</style>


<div class="container-fluid p-0 col-xxl-5 col-lg-6 col-md-10 col-sm-12">
    <RadzenTemplateForm TItem="Announcement"
                        Data="@Announcement" Submit="SubmitAction">
        <div class="card w-100">
            <h5 class="fw-bold mb-4">Your announcement</h5>
            <fieldset class="field">
                <label>Start date: </label>
                <RadzenDatePicker TValue="DateTime"
                                  Style="width: var(--inputs-width)"
                                  Name="StartDate"
                                  Value="@Announcement.StartDate" DateFormat="dd/MM/yyyy"
                                  Change="@(args => { if (args.HasValue) { Announcement.StartDate = args.Value; } })"/>
            </fieldset>
            <RadzenRequiredValidator Style="@ValidatorStyles" Component="StartDate" Popup="true"/>

            <fieldset class="field">
                <label>End date: </label>
                <RadzenDatePicker TValue="DateTime"
                                  Name="EndDate"
                                  Style="width: var(--inputs-width)"
                                  Value="@Announcement.EndDate" DateFormat="dd/MM/yyyy"
                                  Change="@(args => { if (args.HasValue) { Announcement.EndDate = args.Value; } })"/>
            </fieldset>
            <RadzenRequiredValidator Style="@ValidatorStyles" Component="EndDate" Popup="true"/>

            <fieldset class="field">
                <label>Postal code: </label>
                <RadzenNumeric Min="1000" Name="PostalCode" Max="9999"
                               @bind-Value="Announcement.PostalCode"
                               Style="width: var(--inputs-width)"/>
            </fieldset>
            <RadzenRequiredValidator Style="@ValidatorStyles" Component="PostalCode" Popup="true"/>

            <fieldset class="field">
                <label>Description: </label><br/>
                <RadzenTextArea Name="Description" @bind-Value="Announcement.ServiceDescription"
                                Style="width: var(--inputs-width)"/>
            </fieldset>
            <RadzenRequiredValidator Style="@ValidatorStyles" Component="Description" Popup="true"/>


            <b class="mt-4">Pet:</b>
            
            @if (ForPage.Equals("ManageAnnouncement", StringComparison.OrdinalIgnoreCase))
            {
                <div class="pet-part  mt-3">
                    <fieldset class="field mt-0">
                        <label>Type:</label>
                        @{
                            <RadzenDropDown Data="PetType.PetTypesWithNames"
                                            @bind-Value="Announcement.Pet.PetType"
                                            Style="width: var(--inputs-width);"
                                            Name="PetType"
                                            TextProperty="Name"
                                            ValueProperty="Value"/>
                        }
                    </fieldset>
                    <RadzenRequiredValidator Style="@ValidatorStyles" Component="PetType" Popup="true"/>
                    
                    <fieldset class="field">
                        <label>Name:</label>
                        <RadzenTextBox @bind-Value="Announcement.Pet.PetName"
                                       Style="width: var(--inputs-width)"
                                       Name="PetName"/>
                    
                    </fieldset>
                    <RadzenRequiredValidator Style="@ValidatorStyles" Component="PetName" Popup="true"/>
                    
                    <fieldset class="field">
                        <label>Description:</label>
                        <RadzenTextArea @bind-Value="Announcement.Pet.Description"
                                        Style="width: var(--inputs-width)"
                                        Name="PetDescription"/>
                    </fieldset>
                    
                    <fieldset class="field">
                        <label>Weight:</label>
                        <RadzenNumeric @bind-Value="Announcement.Pet.Weight"
                                       Style="width: var(--inputs-width)"
                                       Name="PetWeight"/>
                    </fieldset>
                </div>
            }
            else
            {
                <RadzenSelectBar class="rounded-pill w-100 m-auto d-block" @bind-Value="isNewPet"
                                 Size="ButtonSize.ExtraSmall" TValue="bool"
                                 Style=".valid.modified:not([type=checkbox]) {
                                        outline: none;
                                    } background-color: var(--accent-color);">
                    <Items>
                        <RadzenSelectBarItem Text="Create new pet" Value="true"/>
                        <RadzenSelectBarItem Text="Choose your pet" Value="false"/>
                    </Items>
                </RadzenSelectBar>
                
                <div class="pet-part  mt-3">
                    @if (!isNewPet)
                    {
                        <PetDropDown OwnerEmail="@Announcement.PetOwner.Email" @ref="PetList"/>
                    }
                    else
                    {
                        <fieldset class="field mt-0">
                            <label>Type:</label>
                            @{
                                // var types = Enum.GetValues(typeof(PetType)).Cast<PetType>();
                                <RadzenDropDown Data="PetType.PetTypesWithNames"
                                                @bind-Value="Announcement.Pet.PetType"
                                                Style="width: var(--inputs-width);"
                                                Name="PetType"
                                                TextProperty="Name"
                                                ValueProperty="Value"/>
                            }
                        </fieldset>
                        <RadzenRequiredValidator Style="@ValidatorStyles" Component="PetType" Popup="true"/>

                        <fieldset class="field">
                            <label>Name:</label>
                            <RadzenTextBox @bind-Value="Announcement.Pet.PetName"
                                           Style="width: var(--inputs-width)"
                                           Name="PetName"/>

                        </fieldset>
                        <RadzenRequiredValidator Style="@ValidatorStyles" Component="PetName" Popup="true"/>

                        <fieldset class="field">
                            <label>Description:</label>
                            <RadzenTextArea @bind-Value="Announcement.Pet.Description"
                                            Style="width: var(--inputs-width)"
                                            Name="PetDescription"/>
                        </fieldset>

                        <fieldset class="field">
                            <label>Weight:</label>
                            <RadzenNumeric @bind-Value="Announcement.Pet.Weight"
                                           Style="width: var(--inputs-width)"
                                           Name="PetWeight"/>
                        </fieldset>
                    }
                </div>
                
            }

            <RadzenButton ButtonType="ButtonType.Submit" Style="margin-top: 2rem; background-color: var(--accent-color);">@ActionName</RadzenButton>
        </div>
    </RadzenTemplateForm>
</div>


@code {
    [Parameter]
    public Announcement Announcement { get; set; }
    
    [Parameter] 
    public Action OnSubmitAction { get; set; }
    
    [Parameter]
    public string ActionName { get; set; }
    
    [Parameter]
    public string ForPage { get; set; }
    
    private string ValidatorStyles = "position: relative; width: 20%; margin-left: auto; display: block;";
    private bool isNewPet;
    private PetDropDown PetList;

    private void SubmitAction()
    {
        OnSubmitAction?.Invoke();
    }
}