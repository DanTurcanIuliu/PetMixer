@using Domain.Models
@using Domain.Models.Enums
@using HttpClients.ClientInterfaces
@using Newtonsoft.Json
@inject IPexelsService ImageService
@inject ICareServiceService CareService

<div class="card d-flex flex-column">
    <div class="d-flex flex-row">
        <div class="column">
                @if (string.IsNullOrEmpty(ImageSrc))
                {
                    <div class="rounded-image skeleton"></div>
                }
                else
                {
                    <div class="rounded-image">
                        <img src="@ImageSrc" loading="lazy"/>
                    </div>
                }
            </div>
            <div class="column announcement-data d-flex flex-column flex-grow-1">
                <div class="inside-card">
                    <h3><span style="color: rgb(166,165,165);">@(new PetType() { Value = Announcement.Pet.PetType }.Name)</span> @(Announcement.Pet.PetName)</h3>
                    <RadzenText TextStyle="TextStyle.Body1">Description: @Announcement.Pet.Description</RadzenText>
                    <div class="d-flex flex-row">
                        <div style="margin-right: 15px">Weight: @Announcement.Pet.Weight</div>
                        <div>Vaccinated: @(Announcement.Pet.IsVaccinated ? "Yes" : "No")</div>
                    </div>
                    <RadzenText TextStyle="TextStyle.Body1">Postal Code: @Announcement.PostalCode</RadzenText>
                    <div class="d-flex flex-row">
                        <div style="margin-right: 15px">From: @Announcement.StartDate.ToShortDateString()</div>
                        <div>To: @(Announcement.EndDate.ToShortDateString())</div>
                    </div>
                </div>
                <div class="w-100">
                    <RadzenText TextStyle="TextStyle.Body1">Service description: @Announcement.ServiceDescription</RadzenText>
                </div>
            </div>
    </div>
    
    <div class="action d-flex flex-column align-items-center justify-content-center">
        @if (ShowOfferButton)
            {
                <RadzenButton Click="OnClick">Offer your service</RadzenButton>
            }
            else
            {
                <input type="checkbox" id="toggle"/>
                <label for="toggle" class="button-requests">Requests</label>
                @if (serviceRequests != null && serviceRequests.Any())
                {
                    <div class="requests-container flex-column">
                        @if (serviceRequests != null)
                        {
                            @foreach (var request in serviceRequests)
                            {
                                User caretaker = request.Announcement.PetOwner.Email == request.Initiator.Email ? request.Recipient : request.Initiator;
                                <div class="request d-flex flex-row justify-content-between align-items-center">
                                    <b style="color: white; font-size: 1.2rem; -webkit-text-stroke: 1px black">
                                        @($"{caretaker.Username}")
                                    </b>
                                        <span class="oi oi-star" style="color: gold"></span>
                                    <div>
                                        <button id="accept-request" class="request-action" onclick="@(() => AcceptRequest(request.Id))">
                                            Accept
                                        </button>

                                        <button id="deny-request" class="request-action" onclick="@(() => DenyRequest(request.Id))">
                                            Deny
                                        </button>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
            }
    </div>
</div>

@code {
    [Parameter] public Announcement Announcement { get; set; }

    [Parameter]
    public string ImageSrc { get; set; } = null;
    [Parameter]
    public bool ShowOfferButton { get; set; }

    private IEnumerable<ServiceRequest>? serviceRequests;

    //The Code bellow is used for testing Create service
    [Parameter] public EventCallback OnClickCallback { get; set; }


    protected override async Task OnInitializedAsync()
    {
        ImageSrc = await ImageService.SearchPetImage(PetType.NameFromPetType(Announcement.Pet.PetType), 10);
        try
        {
            serviceRequests = await CareService.GetRequestsAsync(Announcement.Id);
            serviceRequests = serviceRequests.Where(r => r.RequestEnum == RequestEnum.SENT);
        }
        catch (Exception e)
        {
            Console.WriteLine("opfaeriog");
        }
    }
    
    async Task<string> GetAverageRating(string caretakerEmail)
    {
        var feedbacks = await CareService.GetFeedbacks(caretakerEmail);
        return $"{feedbacks.Average(f => f.Rating)}";
    }

    private async Task AcceptRequest(int requestId)
    {
        try
        {
            await CareService.AcceptAsync(requestId);
            foreach (var request in serviceRequests!.Where(r => r.Id != requestId))
            {
                await DenyRequest(request.Id);
            }
            serviceRequests = await CareService.GetRequestsAsync(Announcement.Id);
            serviceRequests = serviceRequests.Where(r => r.RequestEnum == RequestEnum.SENT);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        
    }
    
    private async Task DenyRequest(int requestId)
    {
        await CareService.DenyAsync(requestId);
        serviceRequests = serviceRequests!.Where(r => r.Id != requestId).AsEnumerable();
        StateHasChanged();
    }
    
    private async Task OnClick()
    {
        await OnClickCallback.InvokeAsync();
    }

}