@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IPexelsService ImageService

<div class="card d-flex flex-row">
    <div class="column">
        @if (string.IsNullOrEmpty(ImageSrc))
        {
            <div class="rounded-image skeleton"></div>
        }
        else
        {
            <div class="rounded-image">
                <img src="@ImageSrc" loading="lazy"/>
            </div>
        }
    </div>
    <div class="column announcement-data d-flex flex-column flex-grow-1">
        <div class="inside-card">
            <h3><span style="color: rgb(166,165,165);">@(new PetType(){Value = Announcement.Pet.PetType}.Name)</span>  @(Announcement.Pet.PetName)</h3>
            <RadzenText TextStyle="TextStyle.Body1">Description: @Announcement.Pet.Description</RadzenText>
            <div class="d-flex flex-row">
                <div style="margin-right: 15px">Weight: @Announcement.Pet.Weight</div>
                <div>Vaccinated: @(Announcement.Pet.IsVaccinated ? "Yes" : "No")</div>
            </div>
            <RadzenText TextStyle="TextStyle.Body1">Postal Code: @Announcement.PostalCode</RadzenText>
            <div class="d-flex flex-row">
                <div style="margin-right: 15px">From: @Announcement.StartDate.ToShortDateString()</div>
                <div>To: @(Announcement.EndDate.ToShortDateString())</div>
            </div>
        </div>
        <div class="w-100">
            <RadzenText TextStyle="TextStyle.Body1">Service description: @Announcement.ServiceDescription</RadzenText>
        </div>
        <RadzenButton Click="() => OnClick()">Offer your service</RadzenButton>
    </div>
</div>

@code {
    [Parameter] public Announcement Announcement { get; set; }

    [Parameter]
    public string ImageSrc { get; set; } = null;
    
    //The Code bellow is used for testing Create service
    [Parameter] public EventCallback OnClickCallback { get; set; }


    protected override async Task OnInitializedAsync()
    {
        ImageSrc = await ImageService.SearchPetImage(PetType.NameFromPetType(Announcement.Pet.PetType), 10);
    }
    
    private async Task OnClick()
    {
        await OnClickCallback.InvokeAsync();
    }

}