@namespace BlazorWASM.Pages.Components
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Radzen.Blazor
@using Blazored.LocalStorage
@inject IAuthService AuthService
@inject IPexelsService ImageService
@inject ILocalStorageService LocalStorageService



<style>
    article::before{
        background-size: cover;
        background-image: url("@backgroundImageUrl") !important;
    }
</style>

<div class="card d-flex justify-content-center align-items-center text-center m-auto">
    @if (!isLoginView)
    {
        <h5>Register</h5>
        <div class="field">
            <input type="text" @bind="username" placeholder="Username" @ref="inputUsername" @onkeyup="@(e => HandleKeyPress(e, inputUsername))"/>
            <span class="focus-input"></span>
            <span class="symbol-input">
                <i class="fa fa-user" aria-hidden="true"></i>
            </span>
        </div>
    }
    else
    {
        <h5>Login</h5>
    }
    <div class="field">
        <input type="email" @bind="email" placeholder="Email" @ref="inputEmail" @onkeyup="@(e => HandleKeyPress(e, inputEmail))"/>
        <span class="focus-input"></span>
        <span class="symbol-input">
            <i class="fa fa-envelope" aria-hidden="true"></i>
        </span>
    </div>
    <div class="field">
        <input type="password" @bind="password" placeholder="Password" @ref="inputPassword" @onkeyup="@(e => HandleKeyPress(e, inputPassword))"/>
        <span class="focus-input"></span>
        <span class="symbol-input">
            <i class="fa fa-key" aria-hidden="true"></i>
        </span>
    </div>
    @if (!isLoginView)
    {
        <div class="field d-flex justify-content-between align-items-center">
            <label>You are</label>
            <RadzenSelectBar class="rounded-pill w-75" @bind-Value="userType" Size="ButtonSize.ExtraSmall" TValue="int">
                <Items>
                    <RadzenSelectBarItem 
                        Style="color: var(--accent-color) !important;" 
                                         Text="pet owner" Value="1"/>
                    <RadzenSelectBarItem Style="color: var(--accent-color) !important;" Text="caretaker" Value="2"/>
                </Items>
            </RadzenSelectBar>
        </div>
    }
    <div class="login-option d-flex justify-content-evenly flex-row">
        @{
            string description;
            string action;
            if (isLoginView)
            {
                description = "Don't have an account?";
                action = "Create account";
            }
            else
            {
                description = "Already have an account?";
                action = "Login";
            }
            <p>@description</p>
            <a @onclick="() => isLoginView = !isLoginView">@action</a>
        }
    </div>
    <button class="login-button" @onclick="LoginAsync">@(isLoginView? "Login" : "Register")</button>
</div>

@code {
    private string? username;
    private string? email;
    private string? password;
    private int userType = 1;
    private bool isLoginView = true;
    
    private bool backgroundIsLoaded;
    private string backgroundImageUrl;

    private ElementReference inputPassword;
    private ElementReference inputUsername;
    private ElementReference inputEmail;

}

@functions
{
    protected override async Task OnInitializedAsync()
    {
        backgroundImageUrl = await ImageService.SearchPetImage();
        await LocalStorageService.SetItemAsStringAsync("backgroundImage", backgroundImageUrl);
        Console.WriteLine(backgroundImageUrl);
    }

    private async void HandleKeyPress(KeyboardEventArgs e, ElementReference element)
    {
        if(e.Key != "Enter")
            return;

        if (element.Equals(inputUsername))
            await inputEmail.FocusAsync();
        
        if (element.Equals(inputEmail))
            await inputPassword.FocusAsync();
        
        if (element.Equals(inputPassword))
            await LoginAsync();
    }


    private async Task LoginAsync()
    {
        try
        {
            HandleEmptyFields();
            if (isLoginView)
                await AuthService.LoginAsync(new UserLoginDto(email!, password!));
                
            else
            {
                string type = userType == 1 ? "PetOwner" : "CareTaker";
                await AuthService.RegisterAsync(new UserCreationDto(email!, username!, password!, type));
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
    }

    private void HandleEmptyFields()
    {
        string msg = "";
        int emptyFieldsCounter = 0;
        if (string.IsNullOrEmpty(email))
        {
            msg += string.IsNullOrEmpty(msg) ? "Email" : ", email";
            emptyFieldsCounter++;
        }

        if (string.IsNullOrEmpty(password))
        {
            msg += string.IsNullOrEmpty(msg) ? "Password" : ", password";
            emptyFieldsCounter++;
        }

        if (string.IsNullOrEmpty(username) && !isLoginView)
        {
            msg += string.IsNullOrEmpty(msg) ? "Username" : ", username";
            emptyFieldsCounter++;
        }
        

        if (!string.IsNullOrEmpty(msg))
            throw new Exception(emptyFieldsCounter > 1 ? $"{msg} fields are empty." : $"{msg} field is empty.");
    }
}
