@using Microsoft.AspNetCore.SignalR.Client
@using HttpClients.ClientInterfaces
@using BlazorClient.Auth
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<div class="notification_circle">
    <div @key="notificationNumber" class="notification_number" @onclick="OnClick">
        @notificationNumber
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private int notificationNumber = 0;
    private HubConnection? hubConnection;
    // private AuthenticationState? authState;
    
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7230/offers") 
    // o =>
    // o.AccessTokenProvider = async () => await Task.FromResult<string?>(await authService.GetJWT()))
            .Build();
    }

    public async Task Update(AuthenticationState authState, IAuthService authService)
    {
        Console.WriteLine("Trying to connect to SignalR...");
        Console.WriteLine(authState);
        if (authState.User.Identity != null)
        {
            hubConnection.On("Notify", () =>
            {
                notificationNumber++;
                InvokeAsync(StateHasChanged);
            });
            
            await hubConnection.StartAsync();
            Console.WriteLine("Connected!");
        }
        while (true)
        {
            await Task.Delay(TimeSpan.FromSeconds(5));
            Console.WriteLine(notificationNumber);
        }
        await Update(authState, authService);
    }

    public async Task<HubConnection> GetHubConnection()
    {
        return hubConnection;
    }

    private void OnClick()
    {
        hubConnection.SendAsync("Notify");
    }

}